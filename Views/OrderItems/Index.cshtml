@using LicentaFinal.Core;
@model IEnumerable<LicentaFinal.Models.OrderItem>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create" class="btn btn-outline-primary">Create New</a>
</p>

<div style="display: flex;">
    <div style="flex: 1; padding-right: 20px; ">
        <form asp-action="ChartPie" method="post">
            <div style="display: flex; justify-content: center;">
                <canvas id="myChart" style="max-width: 500px; max-height: 500px;"></canvas>
            </div>
        </form>
    </div>
    <div style="flex: 1; padding-left: 20px; margin-top: 110px;">
        <form asp-action="ChartColumn" method="post">
            <div style="display: flex; justify-content: center;">
                <canvas id="myChartColumn" style="max-width: 750px; max-height: 850px;"></canvas>
            </div>
        </form>
    </div>
</div>



<div class="row">
    <div class="col-md-4">
        <form asp-action="ShowSearchResults">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group input-group">
                <input name="SearchPhrase" class="form-control" id="txtNumeProdus" placeholder="Cauta produs" />
                <div class="input-group-append">
                    <button type="submit" class="btn btn-primary input-group-text">Search</button>
                </div>
            </div>
        </form>
    </div>
</div>



<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.NumeProdus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cantitate)
            </th>
             <th>
                @Html.DisplayNameFor(model => model.Pret)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.NumeProdus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cantitate)
            </td>
                  <td>
                    @Html.DisplayFor(modelItem => item.Pret)
                </td>

                @if (User.Identity.IsAuthenticated && User.IsInRole(Constants.Roles.Administrator))

                {
            <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-warning">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-success">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Delete</a>
            </td>
                }
                else{
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-success">Details</a> 

                </td>
                }
        </tr>
}
    </tbody>
</table>




@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Functie pentru generarea unei culori RGB aleatorii
        function getRandomColor() {
            var r = Math.floor(Math.random() * 256);
            var g = Math.floor(Math.random() * 256);
            var b = Math.floor(Math.random() * 256);
            return "rgba(" + r + "," + g + "," + b + ",0.5)";
        }

        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Select(o => o.NumeProdus))),
                datasets: [{
                    label: 'Cantitate',
                    data: @Html.Raw(Json.Serialize(Model.Select(o => o.Cantitate))),
                    backgroundColor: [
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor()
                    ],
                    borderColor: [
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor()
                    ],
                    borderWidth: 1
                }]

            },
            options: {
                responsive: true
            }
        });
    </script>

    <script>
        // Functie pentru generarea unei culori RGB aleatorii
        function getRandomColor() {
            var r = Math.floor(Math.random() * 256);
            var g = Math.floor(Math.random() * 256);
            var b = Math.floor(Math.random() * 256);
            return "rgba(" + r + "," + g + "," + b + ",0.5)";
        }

        var ctx = document.getElementById('myChartColumn').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar', // sau 'column'
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Select(o => o.NumeProdus))),
                datasets: [{
                    label: 'Valoare Stoc',
                    data: @Html.Raw(Json.Serialize(Model.Select(o => o.ValoareStoc))),
                    backgroundColor: [
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor()
                    ],
                    borderColor: [
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor(),
                        getRandomColor()
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Valoare stoc'
                        }
                    }]
                }
            }
        });
    </script>




        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js"></script>
    <link href="https://code.jquery.com/ui/1.13.1/themes/smoothness/jquery-ui.css" rel="stylesheet" />
    <script>
        $(function () {
            $("#txtNumeProdus").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/OrderItems/AutocompleteNumeProdus",
                        type: "GET",
                        data: { term: request.term },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 2
            });
        });
    </script>

}

